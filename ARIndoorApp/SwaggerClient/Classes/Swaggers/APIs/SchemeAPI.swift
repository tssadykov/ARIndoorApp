//
// SchemeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SchemeAPI {
    /**
     Add a new navigation scheme

     - parameter body: (body) Navigation scheme object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addScheme(body: Scheme, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addSchemeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a new navigation scheme
     - POST /scheme
     - 

     - parameter body: (body) Navigation scheme object that needs to be added 

     - returns: RequestBuilder<Void> 
     */
    open class func addSchemeWithRequestBuilder(body: Scheme) -> RequestBuilder<Void> {
        let path = "/scheme"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Deletes a scheme (debug)

     - parameter schemeId: (path) Scheme id to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteScheme(schemeId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSchemeWithRequestBuilder(schemeId: schemeId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a scheme (debug)
     - DELETE /scheme/{schemeId}
     - 

     - parameter schemeId: (path) Scheme id to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSchemeWithRequestBuilder(schemeId: Int64) -> RequestBuilder<Void> {
        var path = "/scheme/{schemeId}"
        let schemeIdPreEscape = "\(schemeId)"
        let schemeIdPostEscape = schemeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemeId}", with: schemeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get pdf help file by navigation scheme ID

     - parameter schemeId: (path) ID of navigation scheme to return help document 
     - parameter imagesPerPage: (query) Number of images per one document page (Min: 1, Max: 8, Default: 2) (optional, default to 2)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHelpDocumentBySchemeId(schemeId: Int64, imagesPerPage: Int64? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getHelpDocumentBySchemeIdWithRequestBuilder(schemeId: schemeId, imagesPerPage: imagesPerPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get pdf help file by navigation scheme ID
     - GET /scheme/{schemeId}/qrHelpDocument

     - examples: [{contentType=application/json, example=""}]
     - parameter schemeId: (path) ID of navigation scheme to return help document 
     - parameter imagesPerPage: (query) Number of images per one document page (Min: 1, Max: 8, Default: 2) (optional, default to 2)

     - returns: RequestBuilder<Data> 
     */
    open class func getHelpDocumentBySchemeIdWithRequestBuilder(schemeId: Int64, imagesPerPage: Int64? = nil) -> RequestBuilder<Data> {
        var path = "/scheme/{schemeId}/qrHelpDocument"
        let schemeIdPreEscape = "\(schemeId)"
        let schemeIdPostEscape = schemeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemeId}", with: schemeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "imagesPerPage": imagesPerPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get help image by QR code ID

     - parameter schemeId: (path) ID of navigation scheme 
     - parameter qrId: (path) ID of QR code to return help image 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHelpImageById(schemeId: Int64, qrId: Int64, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getHelpImageByIdWithRequestBuilder(schemeId: schemeId, qrId: qrId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get help image by QR code ID
     - GET /scheme/{schemeId}/qrHelp/{qrId}

     - examples: [{contentType=application/json, example=""}]
     - parameter schemeId: (path) ID of navigation scheme 
     - parameter qrId: (path) ID of QR code to return help image 

     - returns: RequestBuilder<Data> 
     */
    open class func getHelpImageByIdWithRequestBuilder(schemeId: Int64, qrId: Int64) -> RequestBuilder<Data> {
        var path = "/scheme/{schemeId}/qrHelp/{qrId}"
        let schemeIdPreEscape = "\(schemeId)"
        let schemeIdPostEscape = schemeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemeId}", with: schemeIdPostEscape, options: .literal, range: nil)
        let qrIdPreEscape = "\(qrId)"
        let qrIdPostEscape = qrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{qrId}", with: qrIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get QR code image by ID

     - parameter schemeId: (path) ID of navigation scheme 
     - parameter qrId: (path) ID of QR code to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQRCodeById(schemeId: Int64, qrId: Int64, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getQRCodeByIdWithRequestBuilder(schemeId: schemeId, qrId: qrId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get QR code image by ID
     - GET /scheme/{schemeId}/qrImage/{qrId}

     - examples: [{contentType=application/json, example=""}]
     - parameter schemeId: (path) ID of navigation scheme 
     - parameter qrId: (path) ID of QR code to return 

     - returns: RequestBuilder<Data> 
     */
    open class func getQRCodeByIdWithRequestBuilder(schemeId: Int64, qrId: Int64) -> RequestBuilder<Data> {
        var path = "/scheme/{schemeId}/qrImage/{qrId}"
        let schemeIdPreEscape = "\(schemeId)"
        let schemeIdPostEscape = schemeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemeId}", with: schemeIdPostEscape, options: .literal, range: nil)
        let qrIdPreEscape = "\(qrId)"
        let qrIdPostEscape = qrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{qrId}", with: qrIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get pdf file with QR codes by navigation scheme ID

     - parameter schemeId: (path) ID of navigation scheme to return QR-document 
     - parameter imagesPerPage: (query) Number of images per one document page (Min: 1, Max: 8, Default: 2) (optional, default to 2)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQRDocumentBySchemeId(schemeId: Int64, imagesPerPage: Int64? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getQRDocumentBySchemeIdWithRequestBuilder(schemeId: schemeId, imagesPerPage: imagesPerPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get pdf file with QR codes by navigation scheme ID
     - GET /scheme/{schemeId}/qrImageDocument

     - examples: [{contentType=application/json, example=""}]
     - parameter schemeId: (path) ID of navigation scheme to return QR-document 
     - parameter imagesPerPage: (query) Number of images per one document page (Min: 1, Max: 8, Default: 2) (optional, default to 2)

     - returns: RequestBuilder<Data> 
     */
    open class func getQRDocumentBySchemeIdWithRequestBuilder(schemeId: Int64, imagesPerPage: Int64? = nil) -> RequestBuilder<Data> {
        var path = "/scheme/{schemeId}/qrImageDocument"
        let schemeIdPreEscape = "\(schemeId)"
        let schemeIdPostEscape = schemeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemeId}", with: schemeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "imagesPerPage": imagesPerPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get navigation scheme by ID

     - parameter schemeId: (path) ID of navigation scheme to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSchemeById(schemeId: Int64, completion: @escaping ((_ data: Scheme?,_ error: Error?) -> Void)) {
        getSchemeByIdWithRequestBuilder(schemeId: schemeId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get navigation scheme by ID
     - GET /scheme/{schemeId}

     - examples: [{contentType=application/json, example={
  "address" : "ул. Чистяковой, 10, Одинцово, Московская обл., Россия, 143005",
  "floors" : [ {
    "doors" : [ {
      "y1" : 1.5,
      "width" : 1.0,
      "room2_id" : 9,
      "x1" : 2.3,
      "y2" : 1.9,
      "x2" : 2.6,
      "id" : 7,
      "wall1_id" : 1,
      "wall2_id" : 4,
      "room1_id" : 5
    }, {
      "y1" : 1.5,
      "width" : 1.0,
      "room2_id" : 9,
      "x1" : 2.3,
      "y2" : 1.9,
      "x2" : 2.6,
      "id" : 7,
      "wall1_id" : 1,
      "wall2_id" : 4,
      "room1_id" : 5
    } ],
    "rooms" : [ {
      "walls" : [ {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      }, {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      } ],
      "staircases" : [ {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      }, {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      } ],
      "qrs" : [ {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      }, {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      } ],
      "furniture" : [ {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      }, {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      } ],
      "can_search" : true,
      "name" : "Кабинет №412",
      "elevators" : [ {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      }, {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      } ],
      "description" : "Кабинет в котором хранятся металлические стулья",
      "id" : 1
    }, {
      "walls" : [ {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      }, {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      } ],
      "staircases" : [ {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      }, {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      } ],
      "qrs" : [ {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      }, {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      } ],
      "furniture" : [ {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      }, {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      } ],
      "can_search" : true,
      "name" : "Кабинет №412",
      "elevators" : [ {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      }, {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      } ],
      "description" : "Кабинет в котором хранятся металлические стулья",
      "id" : 1
    } ],
    "name" : "Этаж 1",
    "id" : 6
  }, {
    "doors" : [ {
      "y1" : 1.5,
      "width" : 1.0,
      "room2_id" : 9,
      "x1" : 2.3,
      "y2" : 1.9,
      "x2" : 2.6,
      "id" : 7,
      "wall1_id" : 1,
      "wall2_id" : 4,
      "room1_id" : 5
    }, {
      "y1" : 1.5,
      "width" : 1.0,
      "room2_id" : 9,
      "x1" : 2.3,
      "y2" : 1.9,
      "x2" : 2.6,
      "id" : 7,
      "wall1_id" : 1,
      "wall2_id" : 4,
      "room1_id" : 5
    } ],
    "rooms" : [ {
      "walls" : [ {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      }, {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      } ],
      "staircases" : [ {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      }, {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      } ],
      "qrs" : [ {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      }, {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      } ],
      "furniture" : [ {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      }, {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      } ],
      "can_search" : true,
      "name" : "Кабинет №412",
      "elevators" : [ {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      }, {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      } ],
      "description" : "Кабинет в котором хранятся металлические стулья",
      "id" : 1
    }, {
      "walls" : [ {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      }, {
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 0.7,
        "x2" : 0.7,
        "id" : 5,
        "wall_prev_id" : 2,
        "wall_next_id" : 5
      } ],
      "staircases" : [ {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      }, {
        "staircase_up_id" : 7,
        "x" : 2.3,
        "width" : 2.3,
        "y" : 1.3,
        "id" : 4,
        "staircase_down_id" : 1,
        "height" : 1.3,
        "direction" : 3.14
      } ],
      "qrs" : [ {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      }, {
        "wall_id" : 6,
        "x" : 2.3,
        "y" : 1.3,
        "z" : 1.3,
        "id" : 1,
        "direction" : 3.14
      } ],
      "furniture" : [ {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      }, {
        "name" : "Стол",
        "y1" : 1.3,
        "x1" : 2.3,
        "y2" : 2.3,
        "x2" : 1.3,
        "id" : 1
      } ],
      "can_search" : true,
      "name" : "Кабинет №412",
      "elevators" : [ {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      }, {
        "wall_id" : 9,
        "elevator_up_id" : 3,
        "x" : 2.3,
        "y" : 1.3,
        "elevator_down_id" : 2,
        "id" : 7,
        "direction" : 0.0
      } ],
      "description" : "Кабинет в котором хранятся металлические стулья",
      "id" : 1
    } ],
    "name" : "Этаж 1",
    "id" : 6
  } ],
  "name" : "Школа №3",
  "description" : "Навигационная схема школы №3. Школа построенна в 2005 году. Имеет 5 этажей.",
  "id" : 0,
  "graph" : {
    "nodes" : [ {
      "obj_id" : 8,
      "x" : 2.3,
      "y" : 1.3,
      "floor_id" : 6,
      "z" : 0.7,
      "obj_type" : "in_room",
      "id" : 9,
      "direction" : 3.14
    }, {
      "obj_id" : 8,
      "x" : 2.3,
      "y" : 1.3,
      "floor_id" : 6,
      "z" : 0.7,
      "obj_type" : "in_room",
      "id" : 9,
      "direction" : 3.14
    } ],
    "edges" : [ {
      "weight" : 5.76,
      "id" : 9,
      "node1_id" : 6,
      "node2_id" : 3
    }, {
      "weight" : 5.76,
      "id" : 9,
      "node1_id" : 6,
      "node2_id" : 3
    } ]
  }
}}]
     - parameter schemeId: (path) ID of navigation scheme to return 

     - returns: RequestBuilder<Scheme> 
     */
    open class func getSchemeByIdWithRequestBuilder(schemeId: Int64) -> RequestBuilder<Scheme> {
        var path = "/scheme/{schemeId}"
        let schemeIdPreEscape = "\(schemeId)"
        let schemeIdPostEscape = schemeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemeId}", with: schemeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Scheme>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get navigation scheme info by ID

     - parameter schemeId: (path) ID of navigation scheme to return info 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSchemeInfoById(schemeId: Int64, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getSchemeInfoByIdWithRequestBuilder(schemeId: schemeId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get navigation scheme info by ID
     - GET /scheme/{schemeId}/info

     - examples: [{contentType=application/json, example={
  "address" : "ул. Чистяковой, 10, Одинцово, Московская обл., Россия, 143005",
  "name" : "Школа №3",
  "description" : "Навигационная схема школы №3. Школа построенна в 2005 году",
  "id" : 0
}}]
     - parameter schemeId: (path) ID of navigation scheme to return info 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getSchemeInfoByIdWithRequestBuilder(schemeId: Int64) -> RequestBuilder<InlineResponse200> {
        var path = "/scheme/{schemeId}/info"
        let schemeIdPreEscape = "\(schemeId)"
        let schemeIdPostEscape = schemeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemeId}", with: schemeIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update an existing navigation scheme (debug)

     - parameter body: (body) Navigation scheme object that needs to be added 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateScheme(body: Scheme, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateSchemeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update an existing navigation scheme (debug)
     - PUT /scheme
     - 

     - parameter body: (body) Navigation scheme object that needs to be added 

     - returns: RequestBuilder<Void> 
     */
    open class func updateSchemeWithRequestBuilder(body: Scheme) -> RequestBuilder<Void> {
        let path = "/scheme"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
